export enum AppointmentStatus {
  SCHEDULED = 'SCHEDULED',
  CONFIRMED = 'CONFIRMED',
  CANCELLED = 'CANCELLED',
  COMPLETED = 'COMPLETED',
  NO_SHOW = 'NO_SHOW'
}

export enum AppointmentType {
  NEW_PATIENT = 'NEW_PATIENT',
  FOLLOW_UP = 'FOLLOW_UP',
  CONSULTATION = 'CONSULTATION',
  PROCEDURE = 'PROCEDURE',
  ROUTINE_CHECKUP = 'ROUTINE_CHECKUP'
}

export interface Location {
  id: string;
  name: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  phone: string;
}

export interface TimeSlot {
  startTime: string; // ISO format date-time
  endTime: string;   // ISO format date-time
  status: 'AVAILABLE' | 'BOOKED' | 'BLOCKED';
}

export interface AppointmentRequest {
  patientId: string;
  providerId: string;
  locationId: string;
  startTime: string;
  endTime: string;
  type: AppointmentType;
  reason: string;
  notes?: string;
}

export class Appointment {
  constructor(
    public readonly id: string,
    public readonly patientId: string,
    public readonly providerId: string,
    public readonly locationId: string,
    public startTime: string,
    public endTime: string,
    public status: AppointmentStatus,
    public type: AppointmentType,
    public reason: string,
    public notes?: string
  ) {}

  public cancel(): void {
    if (this.status === AppointmentStatus.CANCELLED) {
      throw new Error('Appointment is already cancelled');
    }
    if (this.status === AppointmentStatus.COMPLETED) {
      throw new Error('Cannot cancel a completed appointment');
    }
    this.status = AppointmentStatus.CANCELLED;
  }

  public reschedule(newStartTime: string, newEndTime: string): void {
    if (this.status === AppointmentStatus.CANCELLED) {
      throw new Error('Cannot reschedule a cancelled appointment');
    }
    if (this.status === AppointmentStatus.COMPLETED) {
      throw new Error('Cannot reschedule a completed appointment');
    }
    this.startTime = newStartTime;
    this.endTime = newEndTime;
  }

  public confirm(): void {
    if (this.status !== AppointmentStatus.SCHEDULED) {
      throw new Error('Can only confirm scheduled appointments');
    }
    this.status = AppointmentStatus.CONFIRMED;
  }

  public complete(): void {
    if (this.status !== AppointmentStatus.CONFIRMED) {
      throw new Error('Can only complete confirmed appointments');
    }
    this.status = AppointmentStatus.COMPLETED;
  }

  public markNoShow(): void {
    if (this.status !== AppointmentStatus.CONFIRMED) {
      throw new Error('Can only mark confirmed appointments as no-show');
    }
    this.status = AppointmentStatus.NO_SHOW;
  }

  public static create(request: AppointmentRequest): Appointment {
    return new Appointment(
      `appt-${Date.now()}`, // In a real app, this would be generated by the database
      request.patientId,
      request.providerId,
      request.locationId,
      request.startTime,
      request.endTime,
      AppointmentStatus.SCHEDULED,
      request.type,
      request.reason,
      request.notes
    );
  }
}