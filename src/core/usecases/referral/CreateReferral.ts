import { CreateReferralRequest, Referral, ReferralResponse } from '../../entities/Referral';
import { ReferralRepository } from '../../interfaces/repositories/ReferralRepository';
import { PatientRepository } from '../../interfaces/repositories/PatientRepository';
import { ProviderRepository } from '../../interfaces/repositories/ProviderRepository';

export class CreateReferralUseCase {
  constructor(
    private referralRepository: ReferralRepository,
    private patientRepository: PatientRepository,
    private providerRepository: ProviderRepository,
  ) {}

  /**
   * Creates a new referral in the system
   * @param request The referral creation request
   * @param userId The ID of the user creating the referral
   */
  async execute(request: CreateReferralRequest, userId: string): Promise<ReferralResponse> {
    try {
      // Verify that the patient exists
      const patient = await this.patientRepository.findById(request.patientId);
      if (!patient) {
        return {
          referral: null as unknown as Referral,
          message: `Patient with ID ${request.patientId} not found`,
          success: false
        };
      }

      // Verify that the referring provider exists
      const referringProvider = await this.providerRepository.findById(request.referringProviderId);
      if (!referringProvider) {
        return {
          referral: null as unknown as Referral,
          message: `Referring provider with ID ${request.referringProviderId} not found`,
          success: false
        };
      }

      // Verify that the receiving provider exists
      const receivingProvider = await this.providerRepository.findById(request.receivingProviderId);
      if (!receivingProvider) {
        return {
          referral: null as unknown as Referral,
          message: `Receiving provider with ID ${request.receivingProviderId} not found`,
          success: false
        };
      }

      // Create the referral with initial status and audit trail
      const referral = await this.referralRepository.create({
        ...request,
        // These fields will be added by the repository implementation
        // id: generated by repository
        // createdAt: generated by repository
        // updatedAt: generated by repository
        // status: initialized to DRAFT by repository
        // auditTrail: initialized with first status change by repository
      });

      // Update the status to SUBMITTED
      const submittedReferral = await this.referralRepository.updateStatus(
        referral.id, 
        'SUBMITTED', 
        userId, 
        'Referral submitted by user'
      );

      return {
        referral: submittedReferral,
        message: 'Referral created successfully',
        success: true
      };
    } catch (error) {
      console.error('Error creating referral:', error);
      return {
        referral: null as unknown as Referral,
        message: `Error creating referral: ${error instanceof Error ? error.message : String(error)}`,
        success: false
      };
    }
  }
}